name: 自动部署 SAP

on:
  workflow_dispatch:
    inputs:
      environment:
        description: '选择部署环境'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      region:
        description: '选择部署区域'
        required: true
        default: 'SG'
        type: choice
        options:
          - SG
          - US
      is_direct_connect:
        description: '启用直连？理论上速度更快'
        required: true
        type: boolean
        default: false

env:
  MEMORY: 512M

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 安装 CF CLI
      run: |
        wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
        echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
        sudo apt-get update
        sudo apt-get install -y cf8-cli

    - name: 根据输入选择Docker镜像
      run: |
        if [ "${{ github.event.inputs.is_direct_connect }}" = "true" ]; then
          echo "已选择“直连镜像”，使用 ghcr.io/eooce/ws:latest"
          echo "DOCKER_IMAGE=ghcr.io/eooce/ws:latest" >> $GITHUB_ENV
        else
          echo "未选择“直连镜像”，使用默认的 ghcr.io/eooce/nodejs:main"
          echo "DOCKER_IMAGE=ghcr.io/eooce/nodejs:main" >> $GITHUB_ENV
        fi

    - name: 生成应用名称并设置API端点
      run: |
        if [ "${{ github.event.inputs.region }}" = "SG" ]; then
          echo "CF_API=https://api.cf.ap21.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="sg$RANDOM_STR"
        elif [ "${{ github.event.inputs.region }}" = "US" ]; then
          echo "CF_API=https://api.cf.us10-001.hana.ondemand.com" >> $GITHUB_ENV
          RANDOM_STR=$(head /dev/urandom | tr -dc 'a-z' | head -c 6)
          DEFAULT_APP_NAME="us$RANDOM_STR"
        fi
        
        echo "APP_NAME=$DEFAULT_APP_NAME" >> $GITHUB_ENV
        echo "将使用API端点: ${{ env.CF_API }}"
        echo "已自动生成应用名称: $DEFAULT_APP_NAME"

    - name: 登录并自动选择组织和空间
      run: |
        cf login -a ${{ env.CF_API }} -u "${{ secrets.EMAIL }}" -p "${{ secrets.PASSWORD }}"
        
        echo "登录成功，开始自动检测组织和空间..."
        
        SELECTED_ORG=$(cf orgs | awk 'NR>3 {print $1; exit}')
        
        if [ -z "$SELECTED_ORG" ]; then
          echo "错误：未能在您的账户下找到任何可用的组织。"
          echo "请检查您的SAP BTP账户是否已正确设置并启用Cloud Foundry运行时。"
          exit 1
        fi
        
        echo "已自动选择组织: $SELECTED_ORG"
        cf target -o "$SELECTED_ORG"
        
        SELECTED_SPACE="vamp"
        
        if [ -z "$SELECTED_SPACE" ]; then
          echo "错误：在组织 '$SELECTED_ORG' 中未找到任何可用的空间。"
          exit 1
        fi
        
        echo "已自动选择空间: $SELECTED_SPACE"
        cf target -s "$SELECTED_SPACE"
        
        echo "----------------------------------------"
        echo "当前部署目标确认:"
        cf target
        echo "----------------------------------------"
        
        echo "SELECTED_ORG=$SELECTED_ORG" >> $GITHUB_ENV
        echo "SELECTED_SPACE=$SELECTED_SPACE" >> $GITHUB_ENV

    - name: 部署应用
      run: |
        echo "开始部署应用: ${{ env.APP_NAME }}"
        echo "使用镜像: ${{ env.DOCKER_IMAGE }}"
        echo "目标区域: ${{ github.event.inputs.region }}"
        echo "目标组织: ${{ env.SELECTED_ORG }}"
        echo "目标空间: ${{ env.SELECTED_SPACE }}"
        
        cf push ${{ env.APP_NAME }} --docker-image ${{ env.DOCKER_IMAGE }} -m ${{ env.MEMORY }} --health-check-type port --no-start

    - name: 设置环境变量
      run: |
        echo "为应用 ${{ env.APP_NAME }} 设置环境变量..."
        
        cf set-env ${{ env.APP_NAME }} NAME "SAP"
        cf set-env ${{ env.APP_NAME }} UUID "${{ secrets.UUID }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_SERVER "${{ secrets.NEZHA_SERVER }}"
        cf set-env ${{ env.APP_NAME }} NEZHA_KEY "${{ secrets.NEZHA_KEY }}"
        cf set-env ${{ env.APP_NAME }} SUB_PATH "${{ secrets.SUB_PATH }}"
        cf set-env ${{ env.APP_NAME }} CFPORT "${{ secrets.CFPORT }}"
        cf set-env ${{ env.APP_NAME }} CHAT_ID "${{ secrets.CHAT_ID }}"
        cf set-env ${{ env.APP_NAME }} BOT_TOKEN "${{ secrets.BOT_TOKEN }}"
        cf set-env ${{ env.APP_NAME }} ARGO_PORT "${{ secrets.ARGO_PORT }}"

        if echo "${{ secrets.ARGO_AUTH }}" | grep -q '\n'; then
          echo "检测到组合格式的 ARGO_AUTH，将自动解析域名和Token..."
          ARGO_DOMAIN_VALUE=$(echo "${{ secrets.ARGO_AUTH }}" | head -n 1)
          ARGO_AUTH_VALUE=$(echo "${{ secrets.ARGO_AUTH }}" | tail -n +2)
          cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "$ARGO_DOMAIN_VALUE"
          cf set-env ${{ env.APP_NAME }} ARGO_AUTH "$ARGO_AUTH_VALUE"
        else
          echo "使用独立的 ARGO_DOMAIN 和 ARGO_AUTH secrets..."
          cf set-env ${{ env.APP_NAME }} ARGO_DOMAIN "${{ secrets.ARGO_DOMAIN }}"
          cf set-env ${{ env.APP_NAME }} ARGO_AUTH "${{ secrets.ARGO_AUTH }}"
        fi

        CFIP_VALUE="${{ secrets.CFIP }}"
        if [ -z "$CFIP_VALUE" ]; then
          CFIP_VALUE="cf.090227.xyz"
          echo "未提供 CFIP，使用默认值: $CFIP_VALUE"
        fi
        cf set-env ${{ env.APP_NAME }} CFIP "$CFIP_VALUE"
        
        if [ "${{ github.event.inputs.is_direct_connect }}" = "true" ]; then
          echo "已选择“直连镜像”模式，开始自动配置 DOMAIN 环境变量..."
          ROUTE=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
          if [ -n "$ROUTE" ]; then
            echo "已设置 DOMAIN 环境变量为: $ROUTE"
            cf set-env ${{ env.APP_NAME }} DOMAIN "$ROUTE"
          else
            echo "警告：未找到应用路由，无法自动设置 DOMAIN, 请在部署成功后手动将节点配置里的address、host和sni改为应用域名"
          fi
        fi
        
        echo "环境变量设置完成。"

    - name: 启动应用以应用环境变量
      run: |
        echo "正在启动应用并应用所有环境变量..."
        cf start ${{ env.APP_NAME }}

    - name: 详细部署信息
      run: |
        echo "----------------------------------------"
        echo "部署完成！正在验证应用状态..."
        cf app ${{ env.APP_NAME }}
        
        APP_URL=$(cf app ${{ env.APP_NAME }} | grep "routes:" | awk '{print $2}')
        
        echo "----------------------------------------"
        echo "部署成功！详细信息如下："
        echo "区域 (Region): ${{ github.event.inputs.region }}"
        echo "组织 (ORG): ${{ env.SELECTED_ORG }}"
        echo "空间 (SPACE): ${{ env.SELECTED_SPACE }}"
        echo "应用名称 (App Name): ${{ env.APP_NAME }}"
        
        if [ -n "$APP_URL" ]; then
          echo "应用 URL (APP_URL): https://$APP_URL"
        else
          echo "看到这里就证明出问题了。"
        fi
        echo "----------------------------------------"
